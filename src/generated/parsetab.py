
# generated/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'z\x0fX\xf2\xfd\xd1\x17\xf8_v\xc7d\xae\x08\t\x82'
    
_lr_action_items = {'STRING':([8,10,13,18,],[11,11,11,11,]),'SEMICOLON':([1,5,11,12,16,19,20,21,],[6,-3,-9,-8,-6,-5,-7,-10,]),'IDENTIFIER':([2,],[7,]),'COMMA':([11,12,14,16,17,18,20,21,22,],[-9,-8,18,20,20,-7,-7,-10,20,]),'NUMBER':([8,10,13,18,],[12,12,12,12,]),'SETPAGE':([0,6,],[4,4,]),'(':([4,8,10,13,18,],[8,13,13,13,13,]),'EQUALS':([7,],[10,]),'$end':([3,6,9,],[0,-1,-2,]),'VAR':([0,6,],[2,2,]),')':([11,12,15,17,20,21,22,],[-9,-8,19,21,-7,-10,-4,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arguments':([8,],[15,]),'expression':([8,10,13,18,],[14,16,17,22,]),'assignation':([0,6,],[5,5,]),'program':([0,6,],[3,9,]),'statement':([0,6,],[1,1,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement SEMICOLON','program',2,'p_program_statement','./parser.py',21),
  ('program -> statement SEMICOLON program','program',3,'p_program_recursive','./parser.py',25),
  ('statement -> assignation','statement',1,'p_statement','./parser.py',29),
  ('arguments -> expression COMMA expression','arguments',3,'p_arguments','./parser.py',33),
  ('statement -> SETPAGE ( arguments )','statement',4,'p_statement_setpage','./parser.py',37),
  ('assignation -> VAR IDENTIFIER EQUALS expression','assignation',4,'p_assignment','./parser.py',41),
  ('expression -> expression COMMA','expression',2,'p_expression','./parser.py',45),
  ('expression -> NUMBER','expression',1,'p_expression_identifier','./parser.py',55),
  ('expression -> STRING','expression',1,'p_expression_identifier','./parser.py',56),
  ('expression -> ( expression )','expression',3,'p_expression_parenthesis','./parser.py',61),
]
