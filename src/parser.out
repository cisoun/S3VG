Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    MOD_OP
    SETOPACITY
    RECT
    STROKEWIDTH
    MIN_OP
    METHOD
    SETFONT
    DIV_OP
    SETUNIT
    ADD_OP
    PGONE
    STROKECOLOR
    TEXT
    LINE
    CIRCLE
    MUL_OP
    PLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement SEMICOLON
Rule 2     program -> structure
Rule 3     program -> statement SEMICOLON program
Rule 4     statement -> assignation
Rule 5     statement -> structure
Rule 6     assignation -> VAR IDENTIFIER EQUALS expression
Rule 7     expression -> expression COMMA
Rule 8     argument -> IDENTIFIER
Rule 9     argument -> STRING
Rule 10    argument -> NUMBER
Rule 11    arguments -> argument COMMA arguments
Rule 12    arguments -> argument
Rule 13    parameters -> ( arguments )
Rule 14    structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program }
Rule 15    statement -> SETPAGE parameters
Rule 16    statement -> FILLCOLOR parameters
Rule 17    expression -> NUMBER
Rule 18    expression -> STRING
Rule 19    expression -> ( expression )

Terminals, with rules where they appear

(                    : 13 19
)                    : 13 19
ADD_OP               : 
CIRCLE               : 
COMMA                : 7 11
DIV_OP               : 
EQUALS               : 6 14
FILLCOLOR            : 16
FOR                  : 14
IDENTIFIER           : 6 8 14
LINE                 : 
METHOD               : 
MIN_OP               : 
MOD_OP               : 
MUL_OP               : 
NUMBER               : 10 14 14 17
PGONE                : 
PLINE                : 
RECT                 : 
SEMICOLON            : 1 3
SETFONT              : 
SETOPACITY           : 
SETPAGE              : 15
SETUNIT              : 
STRING               : 9 18
STROKECOLOR          : 
STROKEWIDTH          : 
TEXT                 : 
TO                   : 14
VAR                  : 6
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear

argument             : 11 12
arguments            : 11 13
assignation          : 4
expression           : 6 7 19
parameters           : 15 16
program              : 3 14 0
statement            : 1 3
structure            : 2 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement SEMICOLON
    (2) program -> . structure
    (3) program -> . statement SEMICOLON program
    (4) statement -> . assignation
    (5) statement -> . structure
    (15) statement -> . SETPAGE parameters
    (16) statement -> . FILLCOLOR parameters
    (14) structure -> . FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program }
    (6) assignation -> . VAR IDENTIFIER EQUALS expression

    SETPAGE         shift and go to state 8
    FILLCOLOR       shift and go to state 2
    FOR             shift and go to state 1
    VAR             shift and go to state 6

    assignation                    shift and go to state 4
    statement                      shift and go to state 5
    program                        shift and go to state 3
    structure                      shift and go to state 7

state 1

    (14) structure -> FOR . IDENTIFIER EQUALS NUMBER TO NUMBER { program }

    IDENTIFIER      shift and go to state 9


state 2

    (16) statement -> FILLCOLOR . parameters
    (13) parameters -> . ( arguments )

    (               shift and go to state 11

    parameters                     shift and go to state 10

state 3

    (0) S' -> program .



state 4

    (4) statement -> assignation .

    SEMICOLON       reduce using rule 4 (statement -> assignation .)


state 5

    (1) program -> statement . SEMICOLON
    (3) program -> statement . SEMICOLON program

    SEMICOLON       shift and go to state 12


state 6

    (6) assignation -> VAR . IDENTIFIER EQUALS expression

    IDENTIFIER      shift and go to state 13


state 7

    (2) program -> structure .
    (5) statement -> structure .

    $end            reduce using rule 2 (program -> structure .)
    }               reduce using rule 2 (program -> structure .)
    SEMICOLON       reduce using rule 5 (statement -> structure .)


state 8

    (15) statement -> SETPAGE . parameters
    (13) parameters -> . ( arguments )

    (               shift and go to state 11

    parameters                     shift and go to state 14

state 9

    (14) structure -> FOR IDENTIFIER . EQUALS NUMBER TO NUMBER { program }

    EQUALS          shift and go to state 15


state 10

    (16) statement -> FILLCOLOR parameters .

    SEMICOLON       reduce using rule 16 (statement -> FILLCOLOR parameters .)


state 11

    (13) parameters -> ( . arguments )
    (11) arguments -> . argument COMMA arguments
    (12) arguments -> . argument
    (8) argument -> . IDENTIFIER
    (9) argument -> . STRING
    (10) argument -> . NUMBER

    IDENTIFIER      shift and go to state 18
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17

    arguments                      shift and go to state 19
    argument                       shift and go to state 20

state 12

    (1) program -> statement SEMICOLON .
    (3) program -> statement SEMICOLON . program
    (1) program -> . statement SEMICOLON
    (2) program -> . structure
    (3) program -> . statement SEMICOLON program
    (4) statement -> . assignation
    (5) statement -> . structure
    (15) statement -> . SETPAGE parameters
    (16) statement -> . FILLCOLOR parameters
    (14) structure -> . FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program }
    (6) assignation -> . VAR IDENTIFIER EQUALS expression

    $end            reduce using rule 1 (program -> statement SEMICOLON .)
    }               reduce using rule 1 (program -> statement SEMICOLON .)
    SETPAGE         shift and go to state 8
    FILLCOLOR       shift and go to state 2
    FOR             shift and go to state 1
    VAR             shift and go to state 6

    assignation                    shift and go to state 4
    statement                      shift and go to state 5
    program                        shift and go to state 21
    structure                      shift and go to state 7

state 13

    (6) assignation -> VAR IDENTIFIER . EQUALS expression

    EQUALS          shift and go to state 22


state 14

    (15) statement -> SETPAGE parameters .

    SEMICOLON       reduce using rule 15 (statement -> SETPAGE parameters .)


state 15

    (14) structure -> FOR IDENTIFIER EQUALS . NUMBER TO NUMBER { program }

    NUMBER          shift and go to state 23


state 16

    (9) argument -> STRING .

    COMMA           reduce using rule 9 (argument -> STRING .)
    )               reduce using rule 9 (argument -> STRING .)


state 17

    (10) argument -> NUMBER .

    COMMA           reduce using rule 10 (argument -> NUMBER .)
    )               reduce using rule 10 (argument -> NUMBER .)


state 18

    (8) argument -> IDENTIFIER .

    COMMA           reduce using rule 8 (argument -> IDENTIFIER .)
    )               reduce using rule 8 (argument -> IDENTIFIER .)


state 19

    (13) parameters -> ( arguments . )

    )               shift and go to state 24


state 20

    (11) arguments -> argument . COMMA arguments
    (12) arguments -> argument .

    COMMA           shift and go to state 25
    )               reduce using rule 12 (arguments -> argument .)


state 21

    (3) program -> statement SEMICOLON program .

    $end            reduce using rule 3 (program -> statement SEMICOLON program .)
    }               reduce using rule 3 (program -> statement SEMICOLON program .)


state 22

    (6) assignation -> VAR IDENTIFIER EQUALS . expression
    (7) expression -> . expression COMMA
    (17) expression -> . NUMBER
    (18) expression -> . STRING
    (19) expression -> . ( expression )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    (               shift and go to state 27

    expression                     shift and go to state 26

state 23

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER . TO NUMBER { program }

    TO              shift and go to state 30


state 24

    (13) parameters -> ( arguments ) .

    SEMICOLON       reduce using rule 13 (parameters -> ( arguments ) .)


state 25

    (11) arguments -> argument COMMA . arguments
    (11) arguments -> . argument COMMA arguments
    (12) arguments -> . argument
    (8) argument -> . IDENTIFIER
    (9) argument -> . STRING
    (10) argument -> . NUMBER

    IDENTIFIER      shift and go to state 18
    STRING          shift and go to state 16
    NUMBER          shift and go to state 17

    argument                       shift and go to state 20
    arguments                      shift and go to state 31

state 26

    (6) assignation -> VAR IDENTIFIER EQUALS expression .
    (7) expression -> expression . COMMA

    SEMICOLON       reduce using rule 6 (assignation -> VAR IDENTIFIER EQUALS expression .)
    COMMA           shift and go to state 32


state 27

    (19) expression -> ( . expression )
    (7) expression -> . expression COMMA
    (17) expression -> . NUMBER
    (18) expression -> . STRING
    (19) expression -> . ( expression )

    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    (               shift and go to state 27

    expression                     shift and go to state 33

state 28

    (17) expression -> NUMBER .

    )               reduce using rule 17 (expression -> NUMBER .)
    COMMA           reduce using rule 17 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 17 (expression -> NUMBER .)


state 29

    (18) expression -> STRING .

    )               reduce using rule 18 (expression -> STRING .)
    COMMA           reduce using rule 18 (expression -> STRING .)
    SEMICOLON       reduce using rule 18 (expression -> STRING .)


state 30

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER TO . NUMBER { program }

    NUMBER          shift and go to state 34


state 31

    (11) arguments -> argument COMMA arguments .

    )               reduce using rule 11 (arguments -> argument COMMA arguments .)


state 32

    (7) expression -> expression COMMA .

    )               reduce using rule 7 (expression -> expression COMMA .)
    COMMA           reduce using rule 7 (expression -> expression COMMA .)
    SEMICOLON       reduce using rule 7 (expression -> expression COMMA .)


state 33

    (19) expression -> ( expression . )
    (7) expression -> expression . COMMA

    )               shift and go to state 35
    COMMA           shift and go to state 32


state 34

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER . { program }

    {               shift and go to state 36


state 35

    (19) expression -> ( expression ) .

    )               reduce using rule 19 (expression -> ( expression ) .)
    COMMA           reduce using rule 19 (expression -> ( expression ) .)
    SEMICOLON       reduce using rule 19 (expression -> ( expression ) .)


state 36

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { . program }
    (1) program -> . statement SEMICOLON
    (2) program -> . structure
    (3) program -> . statement SEMICOLON program
    (4) statement -> . assignation
    (5) statement -> . structure
    (15) statement -> . SETPAGE parameters
    (16) statement -> . FILLCOLOR parameters
    (14) structure -> . FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program }
    (6) assignation -> . VAR IDENTIFIER EQUALS expression

    SETPAGE         shift and go to state 8
    FILLCOLOR       shift and go to state 2
    FOR             shift and go to state 1
    VAR             shift and go to state 6

    assignation                    shift and go to state 4
    statement                      shift and go to state 5
    program                        shift and go to state 37
    structure                      shift and go to state 7

state 37

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program . }

    }               shift and go to state 38


state 38

    (14) structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program } .

    }               reduce using rule 14 (structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program } .)
    SEMICOLON       reduce using rule 14 (structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program } .)
    $end            reduce using rule 14 (structure -> FOR IDENTIFIER EQUALS NUMBER TO NUMBER { program } .)

